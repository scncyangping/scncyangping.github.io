I"*&<h3 id="自动内存管理">自动内存管理</h3>

<h4 id="运行时数据区域">运行时数据区域</h4>

<ul>
  <li>方法区(共享)</li>
  <li>堆(共享)</li>
  <li>虚拟机栈</li>
  <li>本地方法栈</li>
  <li>程序计数器</li>
</ul>

<h5 id="程序计数器">程序计数器</h5>

<p>一块比较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时，就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>

<p>线程私有</p>

<p>如果线程正在执行的是一个java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，计数器值为空。此内存区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>

<h5 id="虚拟机栈">虚拟机栈</h5>
<p>线程私有</p>

<p>虚拟机栈描述的是java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>

<p>局部变量表存放了编译期可知的各种基本数据类型、对象引用和renturnAddress类型(指向里一条字节码指令的地址)。其中64位长度的long和double类型占用两个局部变量空间(Slot)，其余数据类型只占用1个。局部变量表所需内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。</p>

<p>若线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError,若扩展时，无法申请到足够的内存，就会跑出OutOfMemoryError</p>

<h5 id="本地方法栈">本地方法栈</h5>

<p>与虚拟机栈发挥的作用相似，不同的是本地方法栈执行Native方法。不同的虚拟机实现不同，对于HotSpot虚拟机，直接就把本地方法栈和虚拟机栈合二为一。所抛出的异常与虚拟机栈一样</p>

<h5 id="堆">堆</h5>

<p>所有对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有对象都在堆上分配也渐渐变得不是那么绝对了</p>

<p>从内存回收的角度来看，由于现在收集器基本逗采用分代收集算法，所以java堆中还可以细分为：新生代和老年代，再细致一点有 Eden空间，From Survivor、To Survivor。从内存分配角度来看，线程共享的java堆中可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer, TLAB)。</p>

<h5 id="方法区">方法区</h5>
<p>方法区与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即使编译器编译后的代码等数据。</p>

<p>java虚拟机规范对方法区限制非常宽松，除了和jaav堆一样不需要连续的内存可以选择固定大小或可扩展外，还可以选择不实现垃圾手机。相对而言，垃圾收集行为在这个区域是比较少出翔的，但并非不回收，这个区域的回收目标主要针对常量池的回收和对类型的卸载。</p>

<p>当方法去无法满足内存分配需求时，将抛出OutOfMemoryError</p>

<ul>
  <li>运行时常量池</li>
</ul>

<p>是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项是常量池。用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池存放。</p>

<p>运行时常量池对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译器才能产生，运行期间也可放入。用的比较多的是String类的intern()方法</p>

<h5 id="直接内存">直接内存</h5>
<p>直接内存并不是java虚拟机运行时数据区的一部分，也不是jaav虚拟机规范中定义的内存区域。</p>

<p>在jdk1.4中新加入了NIO类，它可以使用native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。它不会受虚拟机内存限制，但是会受操作系统内存区域限制。</p>

<h5 id="新建对象过程">新建对象过程</h5>

<ol>
  <li>new  –&gt; 检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查是否加载、解析、初始化。若没有，则执行相应的类加载过程</li>
  <li>为对象分配内存，对象所需内存的大小在类加载完成过后便可完全确定。</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>假设java堆中的内存是绝对规整的，所有用过内存都放在一边，空闲的内存放在一边，中间放着一个指针作为分界点的指示器，所有用过的放一边，空闲的放一边，那所分配内存仅仅是把那个指针向空闲的那边挪动一段与对象大小相等的距离，这种分配方式称为指针碰撞。如果java堆中的内存不是规整的，虚拟机就必须维护一个列表，记录哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。这种分配方式叫做空闲列表。选择何种分配方式由java堆是否规整决定，而java堆是否规整由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用Serial、ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。

在内存分配的过程中，需要考虑多线程的情况下，可能出现正在给对象A分配内存，指针还没来的及修改，对象B又同时使用了原来的指针来分配内存，这种情况有两种解决方式，一种是堆分配内存空间的动作进行同步处理，实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性，另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在java堆中预先分配一小块内存，称为本地线程分配缓冲(TLAB)。哪个线程要分配内存，就在哪个线程的TLAB上分配，当TLAB用完过后，才需要同步锁定。
</code></pre></div></div>
<ol>
  <li>初始化对象的零值，不包括对象头，这一步操作保证了对象的实例字段在java代码中可以不赋初始值就可直接使用，程序能访问到这些字段多数据类型所对应得零值</li>
  <li>设置对象头</li>
  <li>执行 init方法，对对象进行初始化</li>
  <li>将指针赋值给栈中引用</li>
</ol>

<h5 id="对象的内存布局">对象的内存布局</h5>

<p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头、实例数据、对齐填充</p>

<p>对象头包含两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码，GC分代年龄、锁状态标志、线程持有的锁</p>

<p>另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，即查找对象的元数据信息不一定耀经过本身，另外，如果对象是一个java数组，那在对象头中还必须要有一块用于记录数组长度的数据，因为虚拟机可以通过普通java对象的元数据信息确定java对象的大小，但从数组的元数据中无法确定数据的大小</p>

<p>实例数据部分是对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容。这部分的存储顺序会受到虚拟机分配策略参数和字段在java源码中定义顺序的影响。HotSpot默认的分配策略为long/doubles、ints、shorts/chars、bytes/booleans、oops。从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件下，在父类中定义的变量会出想在子类之前，如果compactFields参数设置为true,那么子类中较窄的变量也可能会插入到父类变量的空隙中。</p>

<p>第三部分对齐填充并不是必然存在的，仅仅起着占位符的作用。由于HotSpot虚拟机自动内存管理系统要求对象起始地址必须是8字节的整数倍。而对象头部分正好是8字节的倍数，因此，当对象实例数据部分没有对齐时，就需要通过对其填充来补全</p>

<h5 id="对象的访问定位">对象的访问定位</h5>

<p>建立对象过后，java程序需要通过栈上的reference数据来操作堆上的具体对象。对象访问方式决定与虚拟机实现，主流的有两种</p>

<ol>
  <li>使用句柄，java堆中会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，句柄中包含了对象实例数据和各自具体地址信息。这种方式的好处是当垃圾收集或其他方式导致对象移动时，只会改变句柄中的实例数据指针，refernce本身不需要改变。</li>
  <li>直接指针，指向对象实力数据，java堆对象就必须考虑如何放置访问类型数据相关信息。这种方式的好处是更快</li>
</ol>
:ET