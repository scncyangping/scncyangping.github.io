I"GA<h4 id="什么是前缀树-trie">什么是前缀树 Trie</h4>

<p>多用来进行字符串匹配</p>

<ul>
  <li>多叉树</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 如果不仅仅是英文单词的话，还会加上特殊字符等
// 所以一般不会设置next为指定容量的结构
type Node struct {
    // 当前节点的值
    s       string
    // 是否代表了一个单词的结尾
    isWord  bool
    next    []Node
}
</code></pre></div></div>

<p>缺点：</p>

<p>空间需求增大，通常来说，对于单词来说，每一个节点，至少需要26个空间的子节点，所以是原单词的27倍空间</p>

<p>解决方法：</p>

<ul>
  <li>压缩Trie
    <blockquote>
      <p>将cat这种单词放在一个节点，而不是三个节点，维护成本增大</p>
    </blockquote>
  </li>
  <li>Ternary Search Trie(三分搜索Trie)
    <blockquote>
      <p>所有节点子孩子只有三个节点， 通常大于在左，等于在中，小于在右</p>
    </blockquote>
  </li>
</ul>

<h4 id="实现">实现</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">/*</span>
<span class="p">@</span><span class="n">date</span> <span class="p">:</span> <span class="m">2019</span><span class="p">/</span><span class="m">09</span><span class="p">/</span><span class="m">16</span>
<span class="p">@</span><span class="n">author</span> <span class="p">:</span> <span class="n">YaPi</span>
<span class="p">@</span><span class="n">desc</span> <span class="p">:</span> <span class="err">字典树</span> <span class="err">本质就是一个多叉树</span>
<span class="p">*/</span>
<span class="k">package</span> <span class="n">tree</span>

<span class="n">import</span> <span class="s2">"strings"</span>

<span class="n">type</span> <span class="n">TrieNode</span> <span class="n">struct</span> <span class="p">{</span>
	<span class="p">//</span> <span class="err">表示该节点是否是单词节点</span>
	<span class="n">isWord</span>		<span class="n">bool</span>
	<span class="p">//</span> <span class="err">该节点的值</span>
	<span class="n">value</span> 		<span class="k">string</span>
	<span class="p">//</span> <span class="err">该节点的子节点指针数组</span>
	<span class="p">//</span> <span class="n">nodes</span>		<span class="p">[]*</span><span class="n">TrieNode</span>
	<span class="p">//</span> <span class="err">使用</span><span class="n">map</span><span class="err">方便获取指定节点</span>
	<span class="n">nodes</span> 		<span class="n">map</span><span class="p">[</span><span class="k">string</span><span class="p">]*</span><span class="n">TrieNode</span>
<span class="p">}</span>

<span class="n">func</span> <span class="n">NewTrieNode</span><span class="p">()</span> <span class="p">*</span><span class="n">TrieNode</span> <span class="p">{</span>
	<span class="n">return</span> <span class="p">&amp;</span><span class="n">TrieNode</span><span class="p">{</span><span class="n">isWord</span><span class="p">:</span> <span class="nb">false</span><span class="p">,</span><span class="n">nodes</span><span class="p">:</span><span class="n">make</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="k">string</span><span class="p">]*</span><span class="n">TrieNode</span><span class="p">)}</span>
<span class="p">}</span>

<span class="n">func</span> <span class="n">NewTrieNodeByValue</span><span class="p">(</span><span class="n">value</span> <span class="k">string</span><span class="p">,</span><span class="n">isWord</span> <span class="n">bool</span><span class="p">)</span> <span class="p">*</span><span class="n">TrieNode</span> <span class="p">{</span>
	<span class="n">return</span> <span class="p">&amp;</span><span class="n">TrieNode</span><span class="p">{</span><span class="n">isWord</span><span class="p">:</span> <span class="n">isWord</span><span class="p">,</span><span class="n">nodes</span><span class="p">:</span><span class="n">make</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="k">string</span><span class="p">]*</span><span class="n">TrieNode</span><span class="p">),</span><span class="n">value</span><span class="p">:</span><span class="n">value</span><span class="p">}</span>
<span class="p">}</span>

<span class="n">type</span> <span class="n">Trie</span> <span class="n">struct</span> <span class="p">{</span>
	<span class="n">root</span> 		<span class="p">*</span><span class="n">TrieNode</span>
	<span class="n">size</span> 		<span class="n">int</span>
<span class="p">}</span>

<span class="n">func</span> <span class="n">Constructor</span><span class="p">()</span> <span class="p">*</span><span class="n">Trie</span> <span class="p">{</span>
	<span class="n">return</span> <span class="p">&amp;</span><span class="n">Trie</span><span class="p">{</span><span class="n">root</span><span class="p">:</span><span class="n">NewTrieNode</span><span class="p">()}</span>
<span class="p">}</span>

<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="nf">GetSize</span><span class="p">()</span><span class="n">int</span><span class="p">{</span>
	<span class="n">return</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span>
<span class="p">}</span>

<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="n">Add</span><span class="p">(</span><span class="n">word</span> <span class="k">string</span><span class="p">)</span>  <span class="p">{</span>
	<span class="n">node</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">root</span>
	<span class="n">for</span> <span class="n">_</span><span class="p">,</span><span class="n">v</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">word</span><span class="p">{</span>
		<span class="n">n</span> <span class="p">:=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
		<span class="k">if</span> <span class="n">n</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
			<span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span> <span class="p">=</span> <span class="n">NewTrieNodeByValue</span><span class="p">(</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">),</span><span class="nb">false</span><span class="p">)</span>

		<span class="p">}</span>
		<span class="n">node</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
	<span class="p">}</span>
	<span class="p">//</span> <span class="err">该节点是插入单词对应的最后一个节点</span>
	<span class="k">if</span> <span class="c1">! node.isWord {
</span>		<span class="n">node</span><span class="p">.</span><span class="n">isWord</span> <span class="p">=</span> <span class="nb">true</span>
		<span class="n">t</span><span class="p">.</span><span class="n">size</span> <span class="p">++</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="p">//</span> <span class="err">查看是否包含某个单词</span>
<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="n">Contains</span><span class="p">(</span><span class="n">word</span> <span class="k">string</span><span class="p">)</span><span class="n">bool</span>  <span class="p">{</span>
	<span class="n">node</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">root</span>
	<span class="n">for</span> <span class="n">_</span><span class="p">,</span><span class="n">v</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">word</span><span class="p">{</span>
		<span class="n">n</span> <span class="p">:=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
		<span class="k">if</span> <span class="n">n</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
			<span class="n">return</span> <span class="nb">false</span>
		<span class="p">}</span>
		<span class="n">node</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
	<span class="p">}</span>
	<span class="p">//</span> <span class="err">判断该节点是否是一个单词节点</span>
	<span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">isWord</span> <span class="p">{</span>
		<span class="n">return</span> <span class="nb">true</span>
	<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
		<span class="n">return</span> <span class="nb">false</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="p">//</span> <span class="err">用</span><span class="p">.</span><span class="err">号匹配任意字符</span>
<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="n">Match</span><span class="p">(</span><span class="n">word</span> <span class="k">string</span><span class="p">)</span><span class="n">bool</span>  <span class="p">{</span>
	<span class="n">return</span> <span class="n">t</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">root</span><span class="p">,</span><span class="n">strings</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="s2">""</span><span class="p">),</span><span class="m">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="p">//</span> <span class="err">查看是否包含某个单词</span>
<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="n">match</span><span class="p">(</span><span class="n">node</span> <span class="p">*</span><span class="n">TrieNode</span><span class="p">,</span><span class="n">word</span> <span class="p">[]</span><span class="k">string</span><span class="p">,</span><span class="n">index</span> <span class="n">int</span><span class="p">)</span><span class="n">bool</span>  <span class="p">{</span>
	<span class="k">if</span> <span class="n">index</span> <span class="p">==</span> <span class="n">len</span><span class="p">(</span><span class="n">word</span><span class="p">){</span>
		<span class="n">return</span> <span class="n">node</span><span class="p">.</span><span class="n">isWord</span>
	<span class="p">}</span>
	<span class="n">s</span> <span class="p">:=</span> <span class="n">word</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>

	<span class="k">if</span> <span class="n">s</span> <span class="c1">!= "."{
</span>		<span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
			<span class="n">return</span> <span class="nb">false</span>
		<span class="p">}</span>
		<span class="n">return</span> <span class="n">t</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">s</span><span class="p">],</span><span class="n">word</span><span class="p">,</span><span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
	<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
		<span class="n">for</span> <span class="n">_</span><span class="p">,</span><span class="n">v</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">{</span>
			<span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">word</span><span class="p">,</span><span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">){</span>
				<span class="n">return</span> <span class="nb">true</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">return</span> <span class="nb">false</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="p">//</span> <span class="err">查询是否有以</span><span class="n">prefix</span><span class="err">前缀的单词</span>
<span class="n">func</span> <span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">Trie</span><span class="p">)</span><span class="n">IsPrefix</span><span class="p">(</span><span class="n">prefix</span> <span class="k">string</span><span class="p">)</span><span class="n">bool</span>  <span class="p">{</span>
	<span class="n">node</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">root</span>
	<span class="n">for</span> <span class="n">_</span><span class="p">,</span><span class="n">v</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">prefix</span><span class="p">{</span>
		<span class="n">n</span> <span class="p">:=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
		<span class="k">if</span> <span class="n">n</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
			<span class="n">return</span> <span class="nb">false</span>
		<span class="p">}</span>
		<span class="n">node</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">nodes</span><span class="p">[</span><span class="k">string</span><span class="p">(</span><span class="n">v</span><span class="p">)]</span>
	<span class="p">}</span>
	<span class="n">return</span> <span class="nb">true</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="扩展">扩展</h4>

<h5 id="后缀树">后缀树</h5>

<p>后缀树，就是把一串字符的所有后缀保存并且压缩的字典树。相对于字典树来说，后缀树并不是针对大量字符串的，而是针对一个或几个字符串来解决问题。比如字符串的回文子串，两个字符串的最长公共子串等等。
性质：一个字符串构造了一棵树，树中保存了该字符串所有的后缀。
操作：就是建立和应用。</p>

<p>后缀树能解决大多数字符串的问题</p>

<p>（1）查找某个字符串s1是否在另外一个字符串s2中。这个很简单，如果s1在字符串s2中，那么s1必定是s2中某个后缀串的前缀。理解以下后缀串的前缀这个词，其实每个后缀串也就是起始地点不同而已，前缀也就是从开头开始结尾不定。后缀串的前缀就可以组合成该原先字符串的任意子串了。比如banana，anan是anana这个后缀串的前缀。
（2）指定字符串s1在字符串s2中重复的次数
比如说banana是s1，an是s2，那么计算an出现的次数实际上就是看an是几个后缀串的前缀。上图的a节点是保存所有起始为a字母的后缀串，我们看a字母后的n字母的引用计数即可。
（3）两个字符串S1，S2的最长公共部分（广义后缀树）
（4）最长回文串（广义后缀树）</p>
:ET