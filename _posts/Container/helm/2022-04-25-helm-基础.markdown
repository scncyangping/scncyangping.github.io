---
layout:     post
title:      "Helm基础"
subtitle:   ""
date:       2022-04-25 12:20:00
author:     "YaPi"
header-img: ""
tags:
    - helm
---

### 基础命令
```
helm repo add bitnami https://charts.bitnami.com/bitnami

# 查找chart
helm search repo nginx

# 更新repo
helm repo update

# 安装chart
helm install bitnami/nginx --generate-name

# 查看chart信息
helm show chart bitnami/mysql 

# 查看完整chart信息
helm show all bitnami/mysql 

# 列出所有可能被部署的版本
helm list 或 helm ls  

# 卸载一个版本 加上 --keep-history选项 保留版本历史
helm uninstall 

# 下载一个chart，不安装
helm pull chartrepo/chartname	

# 下载依赖的chart，文件会下载到charts目录下
helm dependency update

# 创建一个chart
helm create mychart

# 打包chart
helm package mychart

# 查找chart的格式或信息问题
helm lint mychart
```

#### chart

```
# v2/v1
apiVersion: chart API 版本 （必需）

appVersion: 包含的应用版本（可选）。不需要是语义化，建议使用引号,自定项目版本

name: chart名称 （必需）

version: 语义化2 版本（必需）

kubeVersion: 兼容Kubernetes版本的语义化版本（可选）（在安装时验证版本，k8s版本不匹配会失败）

description: 一句话对这个项目的描述（可选）

# application（默认） / library
type: chart类型 （可选）

icon: 用做icon的SVG或PNG图片URL （可选）

deprecated: 不被推荐的chart （可选，布尔值）

annotations:
  example: 按名称输入的批注列表 （可选）.
  
keywords:
  - 关于项目的一组关键字（可选）
  
home: 项目home页面的URL （可选）

sources:
  - 项目源码的URL列表（可选）
  
dependencies: # chart 必要条件列表 （可选）
  - name: chart名称 (nginx)
    version: chart版本 ("1.2.3")
    # 注意你必须使用helm repo add在本地添加仓库
    repository: （可选）仓库URL ("https://example.com/charts") 或别名 ("@repo-name")
    condition: （可选） 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled )
    tags: # （可选）
      - 用于一次启用/禁用 一组chart的tag
    import-values: # （可选）
      - ImportValue 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项
    alias: （可选） chart中使用的别名。当你要多次添加相同的chart时会很有用
maintainers: # （可选）
  - name: 维护者名字 （每个维护者都需要）
    email: 维护者邮箱 （每个维护者可选）
    url: 维护者URL （每个维护者可选）
```

- kubeVersion

```
>= 1.13.0 < 1.15.0  （或者使用 || 符号连接）   >= 1.13.0 < 1.14.0 || >= 1.14.1 < 1.15.0

除了版本约束外，使用运算符 = != > < >= <= 支持以下速记符号：

闭合间隔的连字符范围， 1.1 - 2.3.4 等价于 >= 1.1 <= 2.3.4
通配符 x， X 和 *， 1.2.x 等价于 >= 1.2.0 < 1.3.0
波浪符号~范围 （允许改变补丁版本）， ~1.2.3 等价于 >= 1.2.3 < 1.3.0
插入符号^范围 （允许改变次版本）， ^1.2.3 等价于 >= 1.2.3 < 2.0.0
```

#### chart hook
Helm 提供了一个 hook 机制允许chart开发者在发布生命周期的某些点进行干预。

- 安装时在加载其他chart之前加载配置映射或密钥
- 安装新chart之前执行备份数据库的任务，然后在升级之后执行第二个任务用于存储数据
- 在删除发布之前执行一个任务以便在删除服务之前退出滚动

注释 | 描述
--- | ---
pre-install | 在模板渲染之后，Kubernetes资源创建之前执行
post-install | 在所有资源加载到Kubernetes之后执行
pre-delete	| 在Kubernetes删除之前，执行删除请求
post-delete	| 在所有的版本资源删除之后执行删除请求
pre-upgrade	 | 在模板渲染之后，资源更新之前执行一个升级请求
post-upgrade | 所有资源升级之后执行一个升级请求
pre-rollback | 在模板渲染之后，资源回滚之前，执行一个回滚请求
post-rollback | 在所有资源被修改之后执行一个回滚请求
test | 调用Helm test子命令时执行


##### 执行步骤

```
1. 用户返回 helm install foo
2. Helm库调用安装API
3. 在 crds/目录中的CRD会被安装
4. 在一些验证之后，库会渲染foo模板
5. 库准备执行pre-install钩子(将hook资源加载到Kubernetes中)
6. 库按照权重对钩子排序(默认将权重指定为0)，然后在资源种类排序，最后按名称正序排列。
7. 库先加载最小权重的钩子(从负到正)
8. 库会等到钩子是 “Ready”状态(CRD除外)
9. 库将生成的资源加载到Kubernetes中。注意如果设置了--wait参数，库会等所有资源是ready状态， 且所有资源准备就绪后才会执行post-install钩子。
10. 库执行post-install钩子(加载钩子资源)。
11. 库会等到钩子是”Ready”状态
12. 库会返回发布对象(和其他数据)给客户端
13 客户端退出
```

##### 示例

```
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "alpine:3.3"
        command: ["/bin/sleep","{{ default "10" .Values.sleepyTime }}"]
```

一个资源可以实现多个钩子

```
annotations:
  "helm.sh/hook": post-install,post-upgrade
```

删除策略

注释 | 描述
--- | ---
before-hook-creation	| 新钩子启动前删除之前的资源 (默认)
hook-succeeded	 | 钩子成功执行之后删除资源
hook-failed	| 如果钩子执行失败，删除资源