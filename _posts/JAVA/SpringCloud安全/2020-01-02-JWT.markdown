---
layout:     post
title:      "微服务之间的通信安全-JWT"
subtitle:   ""
date:       2020-01-02 12:00:00
author:     "YaPi"
header-img: ""
tags:
    - SpringCloud
---

### 微服务之间的通信安全

### JWT(Json Web Token)
JWT的原则是在服务器身份验证后，将生成一个JSON对象，通过加密算法加密过后，并将其发送回用户。之后，客户端应用访问服务时，会带上此数据。服务器不会保存任何回话数据，提高了系统扩展性以及简易程度。


#### JWT构成
JWT由三大部分构成：JWT头，有效载荷，签名

##### JWT头是一个JSON对象

```
{
    "alg":"HS256",
    "typ":"JWT"
}
```
alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT

使用Base64 URL算法将上诉对象转换为字符串保存
##### 有效载荷
是JWT的主体内容，包含了需要传递得数据，除了一7个默认字段外，还可以指定其他私有内容。由于JWT的内容是对所有人可见的，所以尽量不要存放过于隐私数据

使用Base64 URL算法将上诉对象转换为字符串保存

##### 签名
签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。

首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。

HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload),

secret)

在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用"."分隔，就构成整个JWT对象

##### Base64URL算法
JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。

作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是"+"，"/"和"="，由于在URL中有特殊含义，因此Base64URL中对他们做了替换："="去掉，"+"用"-"替换，"/"用"_"替换，这就是Base64URL算法

##### 使用
一般将它放入HTTP请求中的Header Authorization字段中

Authorization: Bearer。当跨域的时候，也可将JWT放置于POST请求的数据主体中。

##### 优缺点

缺点：

1. JWT默认内容是不加密的，所有人可见。但在生成原始令牌后，可以对该令牌进行再次加密再使用
2. 服务端不会保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限，也即为一旦JWT签发，在有效期内将会一直有效

优点：
1. JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数


#### JWT和OAuth的区别和联系
jwt是基于token的认证协议的实现，OAuth2是一种授权框架，提供了一套详细的授权协议标准