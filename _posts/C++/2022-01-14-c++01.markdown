---
layout:     post
title:      "重学C++系列(一)类型、运算符、表达式"
subtitle:   ""
date:       2022-01-16 13:01:00
author:     "YaPi"
header-img: ""
tags:
    - C++
---
### 定义

#### 基础
C++ 是一种高级语言，它是由 Bjarne Stroustrup 于 1979 年在贝尔实验室开始设计开发的。
C++ 进一步扩充和完善了 C 语言，是一种面向对象的程序设计语言。C++ 可运行于多种平台上，如
Windows、MAC 操作系统以及 UNIX 的各种版本

##### 标识符
C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母
A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。

C++ 标识符内不允许出现标点字符，比如 @、& 和 %。C++ 是区分大小写的编程语言。

##### 数据类型
类型 | 位 | 范围
---- | ---- | ---- 
char | 1个字节 | -128到127 或 0 到255
unsigned char | 1 | -128 - 127
signed char | 1 | -128 到 127
int| 4 个字节|-2147483648 到 2147483647
unsigned int	| 4 个字节| 0 到 4294967295
signed int	| 4 个字节	 | -2147483648 到 2147483647
short int	| 2 个字节	 | -32768 到 32767
unsigned short int	| 2 个字节	 |0 到 65,535
signed short int	| 2 个字节	 |-32768 到 32767
long int	|8 个字节	  |-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807
signed long int	| 8 个字节	 |-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807
unsigned long int	|8 个字节	  |0 到 18,446,744,073,709,551,615
float| 4 个字节	 |精度型占4个字节（32位）内存空间，1位符号、8位指数、23位小数
double	| 8 个字节	 |双精度型占8 个字节（64位）内存空间，1位符号、11位指数、52位小数
long double	|16 个字节	  |长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。
wchar_t	 | 2 或 4 个字节	 | 1 个宽字符

- typedef 声明

使用 typedef 定义一个新的类型

语法 typedef type newname

例：
```text
typedef int feet;
```

- 枚举类型

```text
enum 枚举名{ 
     标识符[=整型常数], 
     标识符[=整型常数], 
... 
    标识符[=整型常数]
} 枚举变量;
```
使用

```text
// 这种方式默认第一个名称值为0，第二个名称为1，以此类推
enum color { a, b, c } cc;
cc = b;
```

##### 变量
在所有函数外部定义的变量（通常是在程序的头部），称为全局变量。全局变量的值在程序的整个生命周期内都是有效的。
全局变量可以被任何函数访问。也就是说，全局变量一旦声明，在整个程序中都是可用的。


在函数或一个代码块内部声明的变量，称为局部变量。它们只能被函数内部或者代码块内部的语句使用

当局部变量被定义时，系统不会对其初始化，需要自行对其初始化。定义全局变量时，系统会自动初始化

数据类型 | 初始化默认值
--- | ----
int | 0
char | '\0'
float | 0
double | 0
pointer | NULL

##### 常量

常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量。

常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。

常量就像是常规的变量，只不过常量的值在定义后不能进行修改。

整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。

整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意


##### #define 预处理器

```text
#include <iostream>
using namespace std;
 
#define LENGTH 10   
#define WIDTH  5
#define NEWLINE '\n'
 
int main()
{
 
   int area;  
   
   area = LENGTH * WIDTH;
   cout << area;
   cout << NEWLINE;
   return 0;
}

// 输出 50
```

##### const 关键字

const 类型的对象在程序执行期间不能被修改改变。

```text
const type variable = value;
```

```text
#include <iostream>
using namespace std;
 
int main()
{
   const int  LENGTH = 10;
   const int  WIDTH  = 5;
   const char NEWLINE = '\n';
   int area;  
   
   area = LENGTH * WIDTH;
   cout << area;
   cout << NEWLINE;
   return 0;
}
```

##### 存储类
存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前

- auto
- register
- static
- extern
- mutable
- thread_local

自 C++ 11 以来，auto 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。

C++98标准中auto关键字用于自动变量的声明，但由于使用极少且多余，在 C++17 中已删除这一用法。

根据初始化表达式自动推断被声明的变量的类型

```text
auto f=3.14;      //double
auto s("hello");  //const char*
auto z = new auto(9); // int*
auto x1 = 5, x2 = 5.0, x3='r';//错误，必须是初始化为同一类型
```



register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）
寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 'register' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。

```text
{
   register int  miles;
}
```


static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。

static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。

在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。

```text
#include <iostream>
 
// 函数声明 
void func(void);
 
static int count = 10; /* 全局变量 */
 
int main()
{
    while(count--)
    {
       func();
    }
    return 0;
}
// 函数定义
void func( void )
{
    static int i = 5; // 局部静态变量
    i++;
    std::cout << "变量 i 为 " << i ;
    std::cout << " , 变量 count 为 " << count << std::endl;
}

输出
变量 i 为 6 , 变量 count 为 9
变量 i 为 7 , 变量 count 为 8
变量 i 为 8 , 变量 count 为 7
变量 i 为 9 , 变量 count 为 6
变量 i 为 10 , 变量 count 为 5
变量 i 为 11 , 变量 count 为 4
变量 i 为 12 , 变量 count 为 3
变量 i 为 13 , 变量 count 为 2
变量 i 为 14 , 变量 count 为 1
变量 i 为 15 , 变量 count 为 0

```


extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 'extern' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。
当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 extern 来得到已定义的变量或函数的引用。可以这么理解，extern 是用来在另一个文件中声明一个全局变量或函数。
extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候


mutable 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。



使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。
thread_local 说明符可以与 static 或 extern 合并。
可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。
以下演示了可以被声明为 thread_local 的变量：


```text
thread_local int x;  // 命名空间下的全局变量
class X
{
    static thread_local std::string s; // 类的static成员变量
};
static thread_local std::string X::s;  // X::s 是需要定义的
 
void foo()
{
    thread_local std::vector<int> v;  // 本地变量
}
```

#### 运算符

##### 杂项运算符

运算符 | 描述
--- | ---
siezof | 返回变量大小
Condition ?X:Y | 三目运算
, | 逗号运算符顺序执行一系列表达式，且值是最后一个表达式的值
.(点) 和 -> (箭头) | 成员运算符用于引用类、结构体的成员
Cast | 强制转换运算符把一种数据类型转换成另一种数据类型，如：int(2.31000)返回 2
& | 指针运算符返回变量地址
* | 指向一个变量