---
layout:     post
title:      "重学C++系列(四)指针、引用"
subtitle:   ""
date:       2022-01-18 13:01:00
author:     "YaPi"
header-img: ""
tags:
    - C++
---

### 内存单元

- 内存由很多内存单元组成，这些内存单元用于存放各种类型的数据
- 计算机对内存的每个内存单元都进行了编号，这个编号就称为内存地址，地址决定了内存单元在内存中的位置
- 地址操作记忆不方便，所以c++编译器提供按名字来访问这些内存位置


#### 指针基础概念
指针定义的基本形式：指针本身就是一个变量，其符合变量定义的基本形式，它存储的是值的地址。对类型T，T* 是
到T的指针类型，一个类型为T*的变量能保存一个类型T的对象地址。

* 号靠近变量和靠近类型是没有区别的


```text
int a = 112; float c = 3.14;
int* d = &a; float* e = &c;
```

通过一个指针访问它所指向地址的过程称为间接访问或引用指针；用于执行间接访问的操作服是单目操作服(*)

```text
cout << (*d) << endl;
cout << (*e) << endl;
```

变量：

1. 三个重要的信息
   1.1 变量的地址位置
   1.2 变量所存的信息
   1.2 变量的类型
   
2. 指针变量是一个专门用来记录变量的地址的变量；通过指针变量可以间接的操作另一个变量的值；

#### 数组与指针

```text
int main() {
    char strHelloWorld[] = {"hello"};
    char* pStrHelloWorld = {"hello"};
    // 指针变量的值允许改变
    pStrHelloWorld = strHelloWorld;
    // 数组变量的值不允许改变 报错
    // strHelloWorld = pStrHelloWorld;

    // strHelloWorld 不可变，strHelloWorld[index]的值可变
    // pStrHelloWorld可变，pStrHelloWorld[index]的值可变取觉于所值区间的存储区域是否可变

    return 0;
}
```

指针的数据 T* t[]，数组中每一个元素都是一个指针
数组的指针 T(*t) []，指向一个数组的指针

```text
int main() {
    int c[4] = {15,25,35,45};
    // 定义一个指针数组，每个元素都是一个指针
    int* a[4];
    // 定义一个指针，这个指针指向类型为int[4]的一个数组
    int(*b)[4];
    b = &c;
    for (unsigned i=0; i<4;i++){
        a[i] = &(c[i]);
    }
    cout << *(a[0]) << endl; // 15
    cout << (*b)[3] << endl; // 45
    return 0;
}
```

#### const pointer 与 pointer to const
 
```text
int main() {
    // const修饰看左边，左边没有再看右边
    char strHelloWorld[] = {"helloworld strHelloWorld"};
    // const 修改char,原数据不允许修改，但是指针的值可以修改
    char const* pStr1 = "hellowrold pStr1"; // const char
    // const 修改指针，指针的值可以修改
    char* const pStr2 = strHelloWorld;
    // 原始值和指针值都不允许修改
    char const* const pStr3 = "helloworld pStr3"; // const char* const
    // 不可改变
    // pStr2 = strHelloWorld;
    // 不可改变
    // pStr3 = strHelloWorld;

    for (unsigned index=0;index < strlen(pStr2); index++){
        // 不允许改变
        // pStr3[index] += 1;
        // 不允许改变
        // pStr1[index] += 1;
        pStr2[index] += 1;
    }

    cout << pStr2 << endl;
    cout << pStr1 << endl;
    cout << pStr3 << endl;
    cout << strHelloWorld << endl;
    return 0;
}
```

#### 指向指针的指针
二级指针

```text
int main() {
    int a = 123;
    int* b = &a;
    int** c = &b;
    // *操作符具有从右到左的结合性
    // **这个表达式相当于*(*c),必须从里向外层求值
    // *c得到的是c指向的位置，即b；b里面存储的是a的地址
    // **c相当于*b,得到变量a的值
    return 0;
}
```