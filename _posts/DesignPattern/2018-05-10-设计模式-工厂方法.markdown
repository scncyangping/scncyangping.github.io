---
layout:     post
title:      "设计模式-工厂方法"
subtitle:   ""
date:       2018-05-10 12:03:00
author:     "YaPi"
header-img: ""
tags:
    - 设计模式
---

#### 基础定义

- 定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。
- 工厂方法让类的实例化推迟到子类中运行
- 类型：创建型

使用场景：
1. 创建对象需要大量重复代码
2. 客户端(应用层)不依赖于产品类实例如何被创建、实现等细节
3. 通过其子类来指定创建哪个对象

优点：
1. 用户只需要关心所需产品对应的工厂
2. 复合开闭原则

缺点：
1. 类的个数容易过多，增加负责度
2. 增加系统的抽象性和理解难度


##### 源码实例

1. 集合类 Collection里面的 iterator，在ArrayList里面的实现

##### 代码实例

```
public abstract class Video {
    public abstract void produce();
}

public class JavaVideo extends Video {
    @Override
    public void produce() {
        System.out.println("Java课程视频");
    }
}

public class PythonVideo extends Video {
    @Override
    public void produce() {
        System.out.println("Python课程");
    }
}

public abstract class VideoFactory {
    public abstract Video getVideo();
}

public class JavaVideoFactory extends VideoFactory {
    @Override
    public Video getVideo() {
        return new JavaVideo();
    }
}

public class PythonVideoFactory extends VideoFactory {
    @Override
    public Video getVideo() {
        return new PythonVideo();
    }
}

public class Test {
    public static void main(String[] args){
        VideoFactory videoFactory = new JavaVideoFactory();
        videoFactory.getVideo().produce();
    }
}
```